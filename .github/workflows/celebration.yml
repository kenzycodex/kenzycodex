name: Generate Contribution Celebration

on:
  schedule:
    - cron: "0 */12 * * *"  # Runs every 12 hours
  workflow_dispatch:  # Allows manual triggering
  push:
    branches:
      - main
      - master

jobs:
  generate:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Create generate.mjs
        run: |
          cat > generate.mjs << 'EOF'
          import D3Node from 'd3-node';
          import fs from 'fs';
          
          export async function generateCelebration(github, context) {
            const d3n = new D3Node();
            const d3 = d3n.d3;
            
            // Fetch contribution data
            const username = context.repo.owner;
            const contributionsQuery = `
              query($username: String!) {
                user(login: $username) {
                  contributionsCollection {
                    contributionCalendar {
                      totalContributions
                      weeks {
                        contributionDays {
                          contributionCount
                          date
                        }
                      }
                    }
                  }
                }
              }
            `;
            
            try {
              console.log('Fetching data for user:', username);
              const { data } = await github.graphql(contributionsQuery, { username });
              console.log('Successfully fetched contribution data');
              
              const contributions = data.user.contributionsCollection.contributionCalendar;
              
              // Create SVG
              const svg = d3n.createSVG(1200, 300)
                .attr('xmlns', 'http://www.w3.org/2000/svg')
                .style('background', 'transparent');
              
              // Add gradient definitions
              const defs = svg.append('defs');
              const gradient = defs.append('linearGradient')
                .attr('id', 'contribution-gradient')
                .attr('x1', '0%')
                .attr('y1', '0%')
                .attr('x2', '100%')
                .attr('y2', '100%');
                
              gradient.append('stop')
                .attr('offset', '0%')
                .attr('style', 'stop-color:#FF69B4;stop-opacity:1');
              gradient.append('stop')
                .attr('offset', '50%')
                .attr('style', 'stop-color:#4169E1;stop-opacity:1');
              gradient.append('stop')
                .attr('offset', '100%')
                .attr('style', 'stop-color:#32CD32;stop-opacity:1');
              
              // Add celebration elements
              const container = svg.append('g')
                .attr('transform', 'translate(50, 50)');
              
              // Add animated stars for contributions
              contributions.weeks.forEach((week, weekIndex) => {
                week.contributionDays.forEach((day, dayIndex) => {
                  if (day.contributionCount > 0) {
                    const x = weekIndex * 16;
                    const y = dayIndex * 16;
                    
                    // Create star shape
                    container.append('path')
                      .attr('d', `M ${x},${y} l 5,0 l 2,-5 l 2,5 l 5,0 l -4,3 l 2,5 l -5,-3 l -5,3 l 2,-5 z`)
                      .style('fill', 'url(#contribution-gradient)')
                      .append('animate')
                      .attr('attributeName', 'opacity')
                      .attr('values', '0;1;0')
                      .attr('dur', '2s')
                      .attr('repeatCount', 'indefinite');
                  }
                });
              });
              
              // Add celebration text
              const text = container.append('text')
                .attr('x', 500)
                .attr('y', 130)
                .attr('text-anchor', 'middle')
                .style('font-family', 'Arial')
                .style('font-size', '24px')
                .style('font-weight', 'bold')
                .style('fill', '#0366d6')
                .text(`ðŸŽ‰ ${contributions.totalContributions} Contributions! ðŸŽ‰`);
              
              text.append('animate')
                .attr('attributeName', 'font-size')
                .attr('values', '24;28;24')
                .attr('dur', '2s')
                .attr('repeatCount', 'indefinite');
              
              console.log('Creating dist directory');
              fs.mkdirSync('dist', { recursive: true });
              
              console.log('Writing SVG file');
              fs.writeFileSync('dist/celebration.svg', d3n.svgString());
              console.log('Successfully generated celebration SVG');
              
            } catch (error) {
              console.error('Error in generateCelebration:', error);
              throw error;
            }
          }
          EOF

      - name: Install Dependencies
        run: npm install d3-node axios

      - name: Generate Celebration
        uses: actions/github-script@v7
        with:
          script: |
            console.log('Current working directory:', process.cwd());
            console.log('Checking if generate.mjs exists:', require('fs').existsSync('generate.mjs'));
            const { generateCelebration } = await import(`${process.cwd()}/generate.mjs`);
            await generateCelebration(github, context);

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          publish_branch: output
          commit_message: "ðŸŽ‰ Update contribution celebration animation"